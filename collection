Type Conversions:

(float(****)) converts the input to a float
(str(****)) converts the iput to a string
(int(****)) converts the input to an integer

Python Keywords that cannot be used:

and
as
assert
break
class
continue
def
del
elif
else
except
exec
finally
for
from
global
if
import
in
is
lambda
nonlocal
not
or
pass
raise
return
try
while
with
yield
True
False
None

Asking the user for input example:

current_time = input("what is the current time (in hours 0--23)?")
wait_time = input("How many hours do you want to wait")

print(current_time)
print(wait_time)

final_time = current_time + wait_time
print(final_time)

Example of using input, integer, and string variables:

n = input("What time is it now (in hours)?")
n = int(n)
m = input("How many hours do you want to wait?")
m = int(m)
sum_time = n + m
time_of_day = sum_time % 12
print("The time is now", time_of_day)

Example of a Dice Roll:

import random

prob = random.random()
print(prob)

diceThrow = random.randrange(1,7)       # return an int, one of 1,2,3,4,5,6
print(diceThrow)

module
A file containing Python definitions and statements intended for use in other Python programs. The contents of a module are made available to the other program by using the import statement.

Using the import random to pick 10 numbers between 25 35:

import random

howmany = 10
for counter in range(howmany):
    arandom = random.randrange(25,35)
    print(arandom)
    
Turtle exercise, drawing on the screen:

import turtle
wn = turtle.Screen()
wn.bgcolor("lightgreen")
tess = turtle.Turtle()
tess.color("blue")
tess.shape("turtle")

dist = 5
tess.up()                     # this is new
for _ in range(30):    # start with size = 5 and grow by 2
    tess.stamp()                # leave an impression on the canvas
    tess.forward(dist)          # move tess along
    tess.right(24)              # and turn her
    dist = dist + 2
wn.exitonclick()

Printing a statement 100 times:

for _ in range(100):
    print("We like Python's turtles!")

Drawing Shapes:

# draw an equilateral triangle
import turtle

wn = turtle.Screen()
norvig = turtle.Turtle()

for i in range(3):
    norvig.forward(100)

    # the angle of each vertice of a regular polygon
    # is 360 divided by the number of sides
    norvig.left(360/3)

wn.exitonclick()

# draw a square
import turtle

wn = turtle.Screen()
kurzweil = turtle.Turtle()

for i in range(4):
    kurzweil.forward(100)
    kurzweil.left(360/4)

wn.exitonclick()

# draw a hexagon
import turtle

wn = turtle.Screen()
dijkstra = turtle.Turtle()

for i in range(6):
    dijkstra.forward(100)
    dijkstra.left(360/6)

wn.exitonclick()

# draw an octogon
import turtle

wn = turtle.Screen()
knuth = turtle.Turtle()

for i in range(8):
    knuth.forward(75)
    knuth.left(360/8)

wn.exitonclick()

#draw five pointed stars

import turtle

turing = turtle.Turtle()

for i in range(5):
    turing.forward(110)
    turing.left(216)

Using the len function:

The len function, when applied to a string, returns the number of characters in a string.

fruit = "Banana"
print(len(fruit))

alist =  ["hello", 2.0, 5]
print(len(alist))
print(len(alist[0]))

Slicing:

singers = "Peter, Paul, and Mary"
print(singers[0:5])
print(singers[7:11])
print(singers[17:21])

Slicing on a List:

a_list = ['a', 'b', 'c', 'd', 'e', 'f']
print(a_list[1:3])
print(a_list[:4])
print(a_list[3:])
print(a_list[:])

Using Count:

a = "I have had an apple on my desk before!"
print(a.count("e"))
print(a.count("ha"))

Using Index:

music = "Pull out your music and dancing can begin"
bio = ["Metatarsal", "Metatarsal", "Fibula", [], "Tibia", "Tibia", 43, "Femur", "Occipital", "Metatarsal"]

print(music.index("m"))
print(music.index("your"))

print(bio.index("Metatarsal"))
print(bio.index([]))
print(bio.index(43))

Using Split:

song = "The rain in Spain..."
wds = song.split()
print(wds)

Using Split and a delimiter:

song = "The rain in Spain..."
wds = song.split('ai')
print(wds)

Using Join:

wds = ["red", "blue", "green"]
glue = ';'
s = glue.join(wds)
print(s)
print(wds)

print("***".join(wds))
print("".join(wds))

Lists and for loops:

fruits = ["apple", "orange", "banana", "cherry"]

for afruit in fruits:     # by item
    print(afruit)

Generating a sequence to Iterate Over:

print("This will execute first")

for _ in range(3):
    print("This line will execute three times")
    print("This line will also execute three times")

print("Now we are outside of the for loop!")

Using Loops for the Turtle:

import turtle            # set up alex
wn = turtle.Screen()
alex = turtle.Turtle()

for aColor in ["yellow", "red", "purple", "blue"]:
    alex.color(aColor)
    alex.forward(50)
    alex.left(90)

wn.exitonclick()

The Accumulator Pattern:

nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
accum = 0
for w in nums:
    accum = accum + w
print(accum)





print("range(5): ")
for i in range(5):
    print(i)

print("range(0,5): ")
for i in range(0, 5):
    print(i)

# Notice the casting of `range` to the `list`
print(list(range(5)))
print(list(range(0,5)))

# Note: `range` function is already casted as `list` in the textbook
print(range(5))


    

accum = 0
for w in range(11):
    accum = accum + w
print(accum)

# or, if you use two inputs for the range function

sec_accum = 0
for w in range(1,11):
    sec_accum = sec_accum + w
print(sec_accum)



Count the number of characters in string str1. Do not use len(). Save the number in variable numbs:

str1 = "I like nonsense, it wakes up the brain cells. Fantasy is a necessary ingredient in living."
numbs=0
for i in str1:
    numbs+=1
print(numbs)



Create a list of numbers 0 through 40 and assign this list to the variable numbers. Then, accumulate the total of the list’s values and assign that sum to the variable sum1:

numbers = (range(0, 41))
sum1 = 0
for w in numbers:
    sum1 = sum1 + w
print(sum1)

Indexing with Loops:

fruits = ['apple', 'pear', 'apricot', 'cherry', 'peach']
for n in range(len(fruits)):
    print(n, fruits[n])

Nested Iteration: Image Processing:

#In the example below, we first create a pixel with 45 units of red, 76 units of green, and 200 units of blue. We then print the current amount of red, change the amount of red, and finally, set the amount of blue to be the same as the current amount of green.

import image

p = image.Pixel(45, 76, 200)
print(p.getRed())
p.setRed(66)
print(p.getRed())
p.setBlue(p.getGreen())
print(p.getGreen(), p.getBlue())



#Seeing width, height, and color configure for row and column 45, 55

import image
img = image.Image("luther.jpg")

print(img.getWidth())
print(img.getHeight())

p = img.getPixel(45, 55)
print(p.getRed(), p.getGreen(), p.getBlue())


#Making an image negative

import image

img = image.Image("luther.jpg")
win = image.ImageWin(img.getWidth(), img.getHeight())
img.draw(win)
img.setDelay(1,15)   # setDelay(0) turns off animation

for row in range(img.getHeight()):
    for col in range(img.getWidth()):
        p = img.getPixel(col, row)

        newred = 255 - p.getRed()
        newgreen = 255 - p.getGreen()
        newblue = 255 - p.getBlue()

        newpixel = image.Pixel(newred, newgreen, newblue)

        img.setPixel(col, row, newpixel)

img.draw(win)
win.exitonclick()



#Write a program that asks the user for the number of sides, the length of the side, the color, and the fill color of a regular polygon. The program should draw the polygon and then fill it in.

import turtle    

wn = turtle.Screen()    
alex = turtle.Turtle() # need parens    
sides = int(input("Enter the number of sides: "))    
angle = 360 / sides    
length = int(input("Enter the length of sides: "))    
line_color = input("Enter the color of the lines: ") # takes input like "red" or "black" etc.. 
alex.color(line_color)    
fill_color = input("Enter the fill color for the polygon:" )    
alex.fillcolor(fill_color)    
alex.begin_fill()    
for i in range(sides):    
        alex.forward(44)  # added 44, you had an undefined variable there which is not valid    
        alex.left(angle)    
alex.end_fill()


#Write turtle program with conditionals

import turtle
wn = turtle.Screen()

amy = turtle.Turtle()
amy.pencolor("Pink")
amy.right(170)

colors = ["Purple", "Yellow", "Orange", "Pink", "Orange", "Yellow", "Purple", "Orange", "Pink", "Pink", "Orange", "Yellow", "Purple", "Orange", "Purple", "Yellow", "Orange", "Pink", "Orange", "Purple", "Purple", "Yellow", "Orange", "Pink", "Orange", "Yellow", "Purple", "Yellow"]


for color in colors:
    if amy.pencolor() == "Purple":
        amy.forward(50)
        amy.right(59)
    elif amy.pencolor() == "Yellow":
        amy.forward(65)
        amy.left(98)
    elif amy.pencolor() == "Orange":
        amy.forward(30)
        amy.left(60)
    elif amy.pencolor() == "Pink":
        amy.forward(50)
        amy.right(57)

    amy.pencolor(color)


Boolean values are true or false.

(You can also use "not in") The "in" operator tests if one string is a subtring of another:

print('p' in 'apple')
print('i' in 'apple')
print('ap' in 'apple')
print('pa' in 'apple')


#Using else and if statements nested

x = 10
y = 10

if x < y:
    print("x is less than y")
else:
    if x > y:
        print("x is greater than y")
    else:
        print("x and y must be equal")
        

#Creating empty list, checking conditionals, appending list

percent_rain = [94.3, 45, 100, 78, 16, 5.3, 79, 86]
resps = []
for i in percent_rain:
    if i > 90:
        resps.append("Bring an umbrella.")
    elif i >80:
        resps.append("Good for the flowers?")                   
    elif i > 50:
        resps.append("Watch out for clouds!")
    else:
        resps.append("Nice day!")

    

#Counting characters in a phrase using conditionals:

phrase = "What a wonderful day to program"
tot = 0
for char in phrase:
    if char != " ":
        tot = tot + 1
print(tot)



#Counting vowels in a phrase using conditionals:

s = "what if we went to the zoo"
x = 0
for i in s:
    if i in ['a', 'e', 'i', 'o', 'u']:
        x += 1
print(x)

#Accumlating max value of a list of numbers using conditionals:

nums = [9, 3, 8, 11, 5, 29, 2]
best_num = 0
for n in nums:
    if n > best_num:
        best_num = n
print(best_num)

#Counting numbers of words greater than 3

words = ["water", "chair", "pen", "basket", "hi", "car"]
num_words = 0
for i in words:
    if len(i) > 3:
        num_words += 1

#Enter score with decimal points, gives grade and score

sc = input("Enter a score from 0 to 100 (decimal points are allowed)")
fl_sc = float(sc)

if fl_sc < 60:
    gr = "F"
elif fl_sc < 70:
    gr = "D"
elif fl_sc < 80:
    gr = "C"
elif fl_sc < 90:
    gr = "B"
else:
    gr = "A"

print("Score", fl_sc, "gets a grade of", gr)

#Counting number of rainy months based on rainfall in inches

rainfall_mi = "1.65, 1.46, 2.05, 3.03, 3.35, 3.46, 2.83, 3.23, 3.5, 2.52, 2.8, 1.85"
rainfall_mi_split = rainfall_mi.split(",")
num_rainy_months = 0
for x in rainfall_mi_split:
    x = float(x)
    if x > 3.0:
        num_rainy_months += 1

print(num_rainy_months)

#The variable sentence stores a string. Write code to determine how many words in sentence start and end with the same letter, including one-letter words. Store the result in the variable same_letter_count.

sentence = "students flock to the arb for a variety of outdoor activities such as jogging and picnicking"
same_letter_count = 0
sentence_split = sentence.split(' ')
sent_length = len(sentence_split)
for d in sentence_split:
    if d[0] == d[-1]:
        same_letter_count += 1
print(same_letter_count)

#Write code to count the number of strings in list items that have the character w in it. Assign that number to the variable acc_num.

#HINT 1: Use the accumulation pattern!

#HINT 2: the in operator checks whether a substring is present in a string.

items = ["whirring", "wow!", "calendar", "wry", "glass", "", "llama","tumultuous","owing"]
acc_num = 0
for i in items:
    if 'w' in i:
        acc_num += 1

print(acc_num)

#Write code that counts the number of words in sentence that contain either an “a” or an “e”. Store the result in the variable num_a_or_e.

#Note 1: be sure to not double-count words that contain both an a and an e.

#HINT 1: Use the in operator.

#HINT 2: You can either use or or elif.

sentence = "python is a high level general purpose programming language that can be applied to many different classes of problems."
num_a_or_e = 0
for i in sentence.split():
    if ('a' in i) or ('e' in i):
        num_a_or_e += 1

print(num_a_or_e)

#Write code that will count the number of vowels in the sentence s and assign the result to the variable num_vowels. For this problem, vowels are only a, e, i, o, and u. Hint: use the in operator with vowels.

s = "singing in the rain and playing in the rain are two entirely different situations but both can be fun"
vowels = ['a','e','i','o','u']
num_vowels = 0
for char in s:
    if char in vowels: # check if each char in your string is in your list of vowels
        num_vowels += 1
print (str(num_vowels))

#Create one conditional so that if “Friendly” is in w, then “Friendly is here!” should be assigned to the variable wrd. If it’s not, check if “Friend” is in w. If so, the string “Friend is here!” should be assigned to the variable wrd, otherwise “No variation of friend is in here.” should be assigned to the variable wrd. (Also consider: does the order of your conditional statements matter for this problem? Why?)

w = "Friendship is a wonderful human experience!"
if "Friendly" in w:
    wrd = "Friendly is here!"
elif "Friend" in w:
    wrd = "Friend is here!"
else:
    wrd = "No variation of friend is in here"
print(wrd)

#Create the variable z whose value is 30. Write code to see if z is greater than y. If so, add 5 to y’s value, otherwise do nothing. Then, multiply z and y, and assign the resulting value to the variable x.

z=30
y=22
if z>y:   
    y=y+5
x=z*y
print(x)


#For each string in wrd_lst, find the number of characters in the string. If the number of characters is less than 6, add 1 to accum so that in the end, accum will contain an integer representing the total number of words in the list that have fewer than 6 characters.

wrd_lst = ["Hello", "activecode", "Java", "C#", "Python", "HTML and CSS", "Javascript", "Swift", "php"]
accum = 0
for wrd in wrd_lst:
    if len(wrd) < 6:
        accum += 1
print(accum)
